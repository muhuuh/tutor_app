Product Requirements Document (PRD)
1. Overview and Goals
Objective:
Integrate Stripe into the existing React web application to handle secure subscription billing for monthly plans. The solution must be simple, secure, and require minimal maintenance while using existing technologies: React, TailwindCSS, and Supabase.

Subscription Plans:

Basic: €9.99/month, grants a maximum of 500 credits.
Professional (Pro): €19.99/month, grants a maximum of 2000 credits.
Additional Requirements:

Users should be able to cancel their subscription on a monthly basis.
On signup, every user has a default “free” plan (tracked in the user_subscriptions table) which later upgrades when they subscribe.
The integration must use Supabase Edge Functions for secure backend operations.
The front-end pricing page (built with React and TailwindCSS) will initiate the billing process.
2. Scope
In Scope:

Integration of Stripe Checkout for handling subscription payments.
Use of Stripe’s official React libraries for a smooth client-side integration.
Implementation of a Supabase Edge Function that securely creates Stripe Checkout Sessions.
Updating the user_subscriptions table in Supabase when subscription changes occur (e.g., successful subscription payment, cancellation).
Front-end updates to the pricing page to initiate the payment process.
Out of Scope:

Advanced customer portal customization (the default Stripe Customer Portal may be used for cancellations and subscription management).
In-depth reporting or analytics on subscriptions (beyond updating the Supabase table).
3. System Architecture
Front-End
Framework: React.js with TailwindCSS for styling.
Key Components:
Pricing Component: Displays subscription options (Basic, Professional, and an “Institution” option as informational only).
Get Started Button: Modified to trigger the subscription process (instead of linking to a placeholder /auth route).
Stripe Libraries:
@stripe/stripe-js to load Stripe.js.
@stripe/react-stripe-js to integrate Stripe elements in React (if a custom payment flow is ever needed, though Stripe Checkout is the primary flow).
Back-End
Supabase:
Authentication: Handles user signup.
Database: The user_subscriptions table stores subscription details:
Columns:
id (UUID): Primary key.
user_id (UUID): The ID from Supabase auth.
subscription_type (String): Defaults to "free" on signup.
created_at (Timestamp with time zone).
valid_until (Timestamp with time zone): To be updated upon subscription cancellation.
updated_at (Timestamp with time zone): Updated on subscription changes.
max_credits (Integer): Set to 500 for Basic and 2000 for Pro.
Edge Functions:
A Supabase Edge Function will securely create a Stripe Checkout Session using the Stripe secret key.
Payment Flow Overview
User Action:
A user clicks the “Get Started” button on the pricing page.
Session Creation:
The React component calls the Supabase Edge Function to create a Stripe Checkout Session, passing the chosen plan’s Stripe price ID.
Redirection:
The user is redirected to Stripe Checkout (hosted payment page) for secure processing.
Post-Checkout:
Upon a successful payment, the user is redirected back to a success page.
A webhook (or subsequent client call) will update the user_subscriptions table in Supabase with the new subscription details.
Cancellation:
Cancellation can be handled via the Stripe Customer Portal, with webhook events updating the Supabase table accordingly.
4. Detailed Technical Requirements and Implementation Steps
4.1. Stripe Account Setup
Create a Stripe Account:
Sign up at Stripe.
Obtain API Keys:
Publishable Key: For client-side Stripe initialization.
Secret Key: To be stored securely (e.g., as an environment variable in Supabase for the edge function).
Create Subscription Products and Prices:
In the Stripe Dashboard, create two products:
Basic Plan: Price set at €9.99/month.
Professional Plan: Price set at €19.99/month. Save the Price IDs for later use.
4.2. Front-End Integration
Dependencies Installation
Install the necessary Stripe libraries:

bash
Copy
npm install @stripe/stripe-js @stripe/react-stripe-js
Update the Pricing Component
Modify the “Get Started” button to call a new function that starts the payment process. For example:

javascript
Copy
// Import necessary Stripe hooks and libraries
import React from "react";
import { loadStripe } from "@stripe/stripe-js";

// Load your publishable key from your environment/configuration
const stripePromise = loadStripe("your-publishable-key");

export function Pricing() {
  // pricingPlans as defined (omitted for brevity)

  // New function to handle subscription button click
  const handleSubscribe = async (priceId) => {
    try {
      // Call the edge function endpoint to create a checkout session
      const response = await fetch("/edge-functions/create-checkout-session", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ priceId }),
      });
      const { sessionId, error } = await response.json();
      if (error) {
        console.error("Error creating checkout session:", error);
        return;
      }
      // Redirect to Stripe Checkout
      const stripe = await stripePromise;
      const { error: redirectError } = await stripe.redirectToCheckout({
        sessionId,
      });
      if (redirectError) {
        console.error("Stripe redirect error:", redirectError);
      }
    } catch (err) {
      console.error("Error handling subscription:", err);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      {/* ... existing hero and pricing card UI code ... */}
      <section className="pt-12 pb-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mt-24 space-y-12 lg:space-y-0 lg:grid lg:grid-cols-3 lg:gap-x-8">
            {pricingPlans.map((plan) => (
              <div key={plan.name} className="group relative p-8 bg-white/70 backdrop-blur-sm border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 hover:-translate-y-2 hover:shadow-2xl">
                {/* ... plan details ... */}
                <button
                  onClick={() => handleSubscribe(plan.name === "Basic" ? "price_basicID" : "price_proID")}
                  className="relative z-10 mt-8 block w-full px-6 py-4 text-center font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow"
                >
                  Get started
                </button>
              </div>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
}
Notes:

Replace "your-publishable-key" with your actual Stripe publishable key.
Replace "price_basicID" and "price_proID" with the actual Stripe Price IDs you created for the Basic and Professional plans.
4.3. Back-End: Supabase Edge Function for Creating Checkout Sessions
Create an edge function called create-checkout-session with the following code. This function is written in TypeScript/JavaScript using Deno (the runtime for Supabase Edge Functions):

typescript
Copy
// File: functions/create-checkout-session/index.ts

import { serve } from "std/server";
import Stripe from "stripe";

// Initialize Stripe with your secret key (set as an environment variable in Supabase)
const stripeSecretKey = Deno.env.get("STRIPE_SECRET_KEY");
if (!stripeSecretKey) {
  throw new Error("Stripe secret key not set in environment variables.");
}
const stripe = new Stripe(stripeSecretKey, { apiVersion: "2020-08-27" });

serve(async (req) => {
  if (req.method !== "POST") {
    return new Response("Method Not Allowed", { status: 405 });
  }
  try {
    const { priceId } = await req.json();
    // Get the origin header to build dynamic success and cancel URLs
    const origin = req.headers.get("origin") || "http://localhost:3000";
    
    const session = await stripe.checkout.sessions.create({
      mode: "subscription",
      payment_method_types: ["card"],
      line_items: [{
        price: priceId,
        quantity: 1,
      }],
      // URLs to redirect to after successful or canceled checkout
      success_url: `${origin}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${origin}/cancel`,
    });
    
    return new Response(JSON.stringify({ sessionId: session.id }), {
      headers: { "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error: any) {
    console.error("Error creating checkout session:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { "Content-Type": "application/json" },
      status: 400,
    });
  }
});
Deployment & Configuration:

Deploy this function via the Supabase CLI or Dashboard.
Set the environment variable STRIPE_SECRET_KEY in your Supabase project settings.
The endpoint will be accessible at something like /edge-functions/create-checkout-session.


4.4. Webhooks and Subscription Status Updates
To keep the subscription status in sync with Stripe, implement a webhook handler that listens for relevant Stripe events (e.g., invoice.payment_succeeded, customer.subscription.updated, and customer.subscription.deleted). This can be done via another Supabase Edge Function.

High-Level Steps
a. Receive Webhook Events
Endpoint Creation: Create an endpoint (as a Supabase Edge Function) that listens for POST requests from Stripe.
Signature Verification: Use Stripe’s webhook secret to verify the signature included in the stripe-signature header to ensure the request is from Stripe.
b. Process Events
On Successful Subscription Payment (invoice.payment_succeeded)
Update the user_subscriptions table in Supabase:
Set subscription_type (e.g., "active" or the specific plan type).
Calculate and update valid_until based on the billing cycle.
Set updated_at to the current timestamp.
Update max_credits (set to 500 for Basic or 2000 for Pro).
On Subscription Update (customer.subscription.updated)
Update any changes in subscription details in the user_subscriptions table.
On Subscription Cancellation (customer.subscription.deleted)
Mark the subscription as canceled or revert subscription_type to "free" by updating valid_until and any other relevant fields.
c. Secure the Endpoint
Verify webhook signatures using the Stripe webhook secret.
Ensure that only verified requests from Stripe are processed.
d. Sample Supabase Edge Function for Webhook Handling
typescript
Copy
Edit
/* File: functions/stripe-webhook/index.ts */

import { serve } from "std/server";
import Stripe from "stripe";
import { createClient } from "https://esm.sh/@supabase/supabase-js";

// Initialize Stripe with your secret key (set as an environment variable)
const stripeSecretKey = Deno.env.get("STRIPE_SECRET_KEY");
const stripeWebhookSecret = Deno.env.get("STRIPE_WEBHOOK_SECRET");

if (!stripeSecretKey || !stripeWebhookSecret) {
  throw new Error("Stripe keys are not set in environment variables.");
}

const stripe = new Stripe(stripeSecretKey, { apiVersion: "2020-08-27" });

// Initialize Supabase client using service role key
const supabaseUrl = Deno.env.get("SUPABASE_URL");
const supabaseKey = Deno.env.get("SUPABASE_SERVICE_KEY");

if (!supabaseUrl || !supabaseKey) {
  throw new Error("Supabase environment variables not set.");
}

const supabase = createClient(supabaseUrl, supabaseKey);

serve(async (req) => {
  const sig = req.headers.get("stripe-signature");
  if (!sig) {
    return new Response("Missing Stripe signature", { status: 400 });
  }

  let event: Stripe.Event;

  try {
    const payload = await req.text();
    event = stripe.webhooks.constructEvent(payload, sig, stripeWebhookSecret);
  } catch (err: any) {
    console.error("Webhook signature verification failed.", err);
    return new Response(`Webhook Error: ${err.message}`, { status: 400 });
  }

  // Process the event based on its type
  switch (event.type) {
    case "invoice.payment_succeeded": {
      const invoice = event.data.object as Stripe.Invoice;

      // Example: Update subscription status on successful payment
      // await supabase.from("user_subscriptions")
      //   .update({
      //     subscription_type: "active",
      //     updated_at: new Date(),
      //     valid_until: <calculated_date>,
      //     max_credits: <value>
      //   })
      //   .eq("user_id", <user_id_from_invoice_or_customer>);

      break;
    }

    case "customer.subscription.updated": {
      const subscription = event.data.object as Stripe.Subscription;

      // Update the user_subscriptions table based on subscription changes
      break;
    }

    case "customer.subscription.deleted": {
      const cancelledSubscription = event.data.object as Stripe.Subscription;

      // Mark the subscription as canceled or revert to free status
      break;
    }

    default:
      console.log(`Unhandled event type: ${event.type}`);
  }

  return new Response(JSON.stringify({ received: true }), {
    headers: { "Content-Type": "application/json" },
    status: 200,
  });
});
Deployment & Considerations
Deploy this function via the Supabase CLI or Dashboard.
Set the environment variables:
STRIPE_SECRET_KEY
STRIPE_WEBHOOK_SECRET
SUPABASE_URL
SUPABASE_SERVICE_KEY
Test the webhook using Stripe’s CLI tool or in test mode before deploying to production.
Enhance error logging and consider retries or alerting for failed webhook processing as part of production readiness.


5. Additional Steps and Dependencies
Stripe Account and API Keys:

Sign up for a Stripe account.
Retrieve your publishable key and secret key from the Stripe Dashboard.
Configure these keys in your environment:
Add your Stripe secret key to Supabase’s environment variables for the Edge Function.
Include the publishable key in your React application (preferably using a secure config or environment variable during build).
Supabase Setup:

Ensure your user_subscriptions table is created with the appropriate columns and default values.
If necessary, set up triggers to create default rows for new users (as previously implemented).
Testing:

Test the checkout process in Stripe’s test mode.
Validate that successful payments trigger the correct updates in Supabase.
Verify cancellation flows through the Stripe Customer Portal (or a dedicated cancellation endpoint).
Documentation and Maintenance:

Document the integration, including how to update Stripe Price IDs and manage environment variables.
Monitor webhooks and set up error logging to track issues in production.
6. Summary
Integration Summary:

Front-End:
Update the pricing page to call a new function on “Get Started” that fetches a Checkout Session via a Supabase Edge Function.
Use Stripe’s official React libraries to handle redirection to Stripe Checkout.
Back-End:
Implement a Supabase Edge Function that creates a Stripe Checkout Session using the Stripe secret key.
Set up webhooks to update the user_subscriptions table upon subscription events.
Additional Setup:
Obtain Stripe API keys and configure them securely.
Update Supabase with any necessary RLS or triggers to keep the subscription data in sync.
This PRD outlines a secure, low-maintenance, and straightforward way to integrate subscription billing with Stripe into your React application. The provided code snippets for both the front-end and the Supabase Edge Function are designed to help you or your AI agent automate the necessary integration steps.